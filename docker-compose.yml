version: '3.8'

services:

  searx-server:
    image: searx/searx:latest
    hostname: searx
    networks:
      - backend
    volumes:
      - /mnt-gluster/config-1/searx/searx-data:/etc/searx:rw
#    logging:
#      driver: none
    deploy:
      mode: replicated
      replicas: 4
      restart_policy:
        condition: any
      update_config:
        parallelism: 2
        delay: 10s
        order: stop-first
        monitor: 10s
      rollback_config:
        parallelism: 2
        delay: 10s
        order: stop-first
        monitor: 10s
    command: ${SEARX_COMMAND:-}
    environment:
      - BIND_ADDRESS=0.0.0.0:8080
      - BASE_URL=https://${SEARX_HOSTNAME}/
      - MORTY_URL=https://${SEARX_HOSTNAME}/morty/
      - MORTY_KEY=${MORTY_KEY}      
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
      - DAC_OVERRIDE
    
  filtron-server:
    image: dalf/filtron:latest
    hostname: filtron
    networks:
      - backend
    volumes:
      - /mnt-gluster/config-1/searx/rules.json:/etc/filtron/rules.json:rw
#      logging:
#        driver: none
    deploy:
      mode: replicated
      replicas: 4
      restart_policy:
        condition: any
      update_config:
        parallelism: 2
        delay: 10s
        order: stop-first
        monitor: 10s
      rollback_config:
        parallelism: 2
        delay: 10s
        order: stop-first
        monitor: 10s
      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=traefik-public"
        # Filtron Router
        - "traefik.http.routers.searx-filtron.rule=Host(`${SEARX_HOSTNAME}`)"
        - "traefik.http.routers.searx-filtron.tls.certresolver=letsencrypt"
        - "traefik.http.routers.searx-filtron.middlewares=searx-dynamic-headers,searx-csp-headers,searx-api-headers"
        - "traefik.http.routers.searx-filtron.entrypoints=websecure"
        - "traefik.http.routers.searx-filtron.services=searx-filtron-service"
        - "traefik.http.services.searx-filtron-service.loadbalancer.server.port=4040"
        # Filtron Static file Router
        - "traefik.http.routers.searx-static.rule=Host(`${SEARX_HOSTNAME}`) && PathPrefix(`/static`)"
        - "traefik.http.routers.searx-static.tls.certresolver=letsencrypt"
        - "traefik.http.routers.searx-static.entrypoints=websecure"
        - "traefik.http.routers.searx-static.middlewares=searx-static-headers,searx-csp-headers"
        - "traefik.http.routers.searx-static.services=searx-static-service"
        - "traefik.http.services.searx-static-service.loadbalancer.server.port=4040"
        # Header middleware for dynamic (not static) files
        - "traefik.http.middlewares.searx-dynamic-headers.headers.customResponseHeaders.Cache-Control=no-cache, no-store"
        - "traefik.http.middlewares.searx-dynamic-headers.headers.customResponseHeaders.Pragma=no-cache"
        # Header middleware for searx API
        - "traefik.http.middlewares.searx-api-headers.headers.accessControlAllowMethods=GET, OPTIONS"
        - "traefik.http.middlewares.searx-api-headers.headers.accessControlAllowOriginList=*"
        # Header searx CSP
        - "traefik.http.middlewares.searx-csp-headers.headers.contentSecurityPolicy=upgrade-insecure-requests; default-src 'none'; script-src 'self'; object-src 'self'; style-src 'self' https://searx.silkky.cloud/search; form-action 'self'; font-src 'self'; frame-ancestors 'self'; base-uri 'self'; img-src * data: https://*.tile.openstreetmap.org; frame-src https://www.youtube-nocookie.com https://player.vimeo.com https://www.dailymotion.com https://www.deezer.com https://www.mixcloud.com https://w.soundcloud.com https://embed.spotify.com"
        # Header middleware for static files
        - "traefik.http.middlewares.searx-static-headers.headers.customResponseHeaders.Cache-Control=public, max-age=31536000"
    read_only: true
    command: -listen 0.0.0.0:4040 -api 0.0.0.0:4041 -target searx:8080
    cap_drop:
      - ALL

  morty-server:
    image: dalf/morty:latest
    hostname: morty
    networks:
      - traefik-public
      - backend
#      logging:
#        driver: none
    deploy:
      mode: replicated
      replicas: 4
      restart_policy:
        condition: any
      update_config:
        parallelism: 2
        delay: 10s
        order: stop-first
        monitor: 10s
      rollback_config:
        parallelism: 2
        delay: 10s
        order: stop-first
        monitor: 10s
      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=traefik-public"
        - "traefik.http.routers.searx-morty.rule=Host(`${SEARX_HOSTNAME}`) && PathPrefix(`/morty`)"
        - "traefik.http.routers.searx-morty.tls.certresolver=letsencrypt"
        - "traefik.http.routers.searx-morty.entrypoints=websecure"
        - "traefik.http.routers.searx-morty.middlewares=searx-dynamic-headers,searx-morty-csp-headers"
        - "traefik.http.routers.searx-morty.services=searx-morty-service"
        - "traefik.http.services.searx-morty-service.loadbalancer.server.port=3000"
        # Header middleware for morty CSP
        - "traefik.http.middlewares.searx-morty-csp-headers.headers.contentSecurityPolicy=default-src 'none'; style-src 'self' 'unsafe-inline'; form-action 'self'; frame-ancestors 'self'; base-uri 'self'; img-src 'self' data:; font-src 'self'; frame-src 'self'"  
    read_only: true
    command: -timeout 6 -ipv6
    environment:
      - MORTY_KEY=${MORTY_KEY}
      - MORTY_ADDRESS=0.0.0.0:3000
    cap_drop:
      - ALL

networks:
  traefik-public:
    external: true
  backend:
    driver: overlay